%include {
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Stian Valentin Svedenborg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "minicalc.h"
#include "ast.h"
#include "operations.h"
#include <iostream>
#include <cassert>
#include <unordered_map>
#include <functional>

static const std::unordered_map<std::string, std::function<int(int, int)>> binary_functions{
        {"pow", minicalc_pow},
        {"next_multiple", minicalc_next_multiple},
};

static const std::unordered_map<std::string, std::function<int(int)>> unary_functions{
        {"abs", minicalc_abs},
};
}

%left PLUS MINUS.
%left DIV MUL MOD.
%nonassoc UNARY_MINUS.
%nonassoc POW.

%extra_argument { MiniCalc *owner }

%syntax_error {
   owner->parse_error("Syntax error!");

}

%token_type  {MiniCalc::Token*}
%token_prefix {TOK_}
%token_destructor {
    (void) owner;
    delete $$;
}


%type expr  {node*}
%destructor expr {
    delete $$;
}
%start_symbol start

start ::= result.

result   ::= expr(A). {
    owner->set_root(A);
}

expr(A) ::= INT(B). {
    A = create_node(B->value);
}

expr(A) ::= expr(B) PLUS expr(C).    { A = create_node(B, C, minicalc_add); }
expr(A) ::= expr(B) DIV expr(C).     { A = create_node(B, C, minicalc_div); }
expr(A) ::= expr(B) MUL expr(C).     { A = create_node(B, C, minicalc_mul); }
expr(A) ::= expr(B) MINUS expr(C).   { A = create_node(B, C, minicalc_sub); }
expr(A) ::= expr(B) MOD expr(C).     { A = create_node(B, C, minicalc_mod); }
expr(A) ::= expr(B) POW expr(C).     { A = create_node(B, C, minicalc_pow); }
expr(A) ::= MINUS expr(B). [UNARY_MINUS]
{
    A = create_node(B, minicalc_negate);
}
expr(A) ::= IDENTIFIER(I).           { A = create_node(I->identifier, *owner); }
expr(A) ::= IDENTIFIER(F) LPAREN expr(A0) COMMA expr(A1) RPAREN.
    {
        auto it = binary_functions.find(F->identifier);
        if (it != binary_functions.end()) {
            A = create_node(A0, A1, it->second);
        }
        else {
            owner->parse_error("Undeclared function '" + F->identifier + "'");
            A = nullptr;
        }
    }

expr(A) ::= IDENTIFIER(F) LPAREN expr(A0) RPAREN.
{
    auto it = unary_functions.find(F->identifier);
        if (it != unary_functions.end()) {
            A = create_node(A0, it->second);
    }
    else {
        owner->parse_error("Undeclared function '" + F->identifier + "'");
        A = nullptr;
    }
}

expr(A) ::= LPAREN expr(B) RPAREN.   { A = B; }
