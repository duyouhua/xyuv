##########################################
#                 IMC1                   #
##########################################
# Source: https://msdn.microsoft.com/en-us/library/windows/desktop/dd206750(v=vs.85).aspx#imc1
{
    # The fourcc value is IMC1
    "fourcc" : "IMC1",

    # Pixel (0,0) is in the upper left corner of the image.
    "origin" : "upper_left",

    # Chroma subsampling mode is 4:2:0, corresponding to a 2x2 macro pixel.
    "subsampling_mode" : {
        "macro_px_w" : 2,
        "macro_px_h" : 2
    },

    # Three planes, Y before V before U.
    "planes" : [
        # Luma plane (Y)
        {
            # Start at the beginning
            "base_offset"  : "0",

            # Ensure that we always allocate full blocks. This is the right way to do it unless you
            # are using a format with restrictions on image size.
            "line_stride"  : "next_multiple(image_w, macro_px_w)",

            # Make sure each plane is also large enough to hold each macro pixel.
            "plane_size"   : "line_stride * next_multiple(image_h, macro_px_h)",

            # Even though the macro pixel is 2x2 each sample in the luma plane is ordered linearly.
            # Therefore the block_stride is 8 bits.
            "block_stride" : 8,

            # The plane is not interleaved.
            "interleave_pattern" : "NO_INTERLEAVING"
        },
        {
            # The V plane must start at a line that is a multiple of 16. [MSDN]
            "base_offset"  : "next_multiple(image_h, 16) * plane[0].line_stride",

            # The line stride must be the same as for plane 0.
            "line_stride"  : "plane[0].line_stride",

            # The size of plane 1 is smaller than that of plane 0 as we are using 2x2 sub-sampling.
            "plane_size"   : "line_stride * next_multiple(image_h, macro_px_h)/macro_px_h",

            # Samples in the chroma planes are also linear.
            "block_stride" : 8,

            # No interleaving
            "interleave_pattern" : "NO_INTERLEAVING"
        },
        {
            # The U plane must start at a line that is a multiple of 16. [MSDN]
            "base_offset"  : "next_multiple(plane[1].base_offset + plane[1].size, 16 * plane[0].line_stride )",

            # Much the same as for the V plane
            "line_stride"  : "plane[0].line_stride",
            "plane_size"   : "line_stride * next_multiple(image_h, macro_px_h)/macro_px_h",
            "block_stride" : 8,
            "interleave_pattern" : "NO_INTERLEAVING"
        }
    ],

    # Channel descriptor for the luma channel
    "y_block" : {
        # This is where we specify that the luma plane is linear.
        "block_w" : 1,
        "block_h" : 1,
        "samples" : [
            {
                # From which plane is this sample read from.
                "plane" : 0,

                # Bits used in the integer part of the format.
                "int_bits" : 8,

                # Bits used in the fractional part of the format.
                "frac_bits" : 0,

                # Offset from the least significant bit to this sample.
                "offset" : 0
            }
        ]
    },

    "u_block" : {
        "block_w" : 1,
        "block_h" : 1,
        "samples" : [
            {
                # From which plane is this sample read from.
                "plane" : 2,

                # Bits used in the integer part of the format.
                "int_bits" : 8,

                # Bits used in the fractional part of the format.
                "frac_bits" : 0,

                # Offset from the least significant bit to this sample.
                "offset" : 0
            }
        ]
    },

    "v_block" : {
        "block_w" : 1,
        "block_h" : 1,
        "samples" : [
            {
                # From which plane is this sample read from.
                "plane" : 1,

                # Bits used in the integer part of the format.
                "int_bits" : 8,

                # Bits used in the fractional part of the format.
                "frac_bits" : 0,

                # Offset from the least significant bit to this sample.
                "offset" : 0
            }
        ]
    },

    # There are no alpha samples in this image.
    "a_block" : {
        "block_w" : 0,
        "block_h" : 0,
        "samples" : []
    }
}